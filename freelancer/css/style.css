:root{ /*This is a pseudo selector*/
    --white: #ffffff; /*these are the color that we will use in the page. For example, color: var(white);*/
    --black: #212121;
    --primary: #ffc107;
    --secundary: #0097a7;
    --gray: #757575;
    --lightGray: #dfe9f3;

    --principal-size: 3.8rem;
}

/*Globals*/
html{
    font-size: 62.5%;
    box-sizing: border-box; /*Box Model*/
}
/*This together of the box-sizing, is for when you apply width and padding for example, does not change the size of the element.*/
*, *::before, *::after { 
    box-sizing: inherit;
}
body{
    font-size: 16px; /* 1rem = 10px */
    font-family: "Krub", sans-serif;
    background-image: linear-gradient(to top, var(--lightGray) 0%, var(--white) 100%); /*Putting it a degraded.*/
}
.container{
    max-width: 120rem;
    margin: 0 auto;
}
.button {
    background-color: var(--secundary);
    color: var(--white);
    text-decoration: none;
    font-size: 2rem;
    font-weight: 700;
    padding: 1rem 3rem;
    margin-top: 1rem;
    text-transform: uppercase;
    border-radius: .5rem;
    width: 90%;
    text-align: center;
    border: none;
}
@media (min-width: 768px) {
    .button {
        width: auto;
    }
}
.shadow { /*To add shadow using box shadow with cssmatic.com*/
    -webkit-box-shadow: 0px 5px 15px 0px rgba(112,112,112,0.48);
    -moz-box-shadow: 0px 5px 15px 0px rgba(112,112,112,0.48);
    box-shadow: 0px 5px 15px 0px rgba(112,112,112,0.48);
    background-color: var(--white);
    padding: 2rem;
    border-radius: 1rem;
}
.button:hover {
    cursor: pointer;
}

/*Typography*/
h1{
    font-size: 3.8rem;
}
h2{
    font-size: 2.8rem;
}
h3{
    font-size: 1.8rem;
}

h1, h2, h3 {
    text-align: center;
}

/*Titles*/
.title span{
    font-size: 2rem;
}

/*Utilities*/
.w-sm-100 {
    width: 100%;
}
@media (min-width: 768px){
    .w-sm-100 {
        width: auto;
    }
}
.flex {
    display: flex;
}
.align-right {
    justify-content: end;
}

/*Main Navegation*/
.nav-bg{
    background-color: var(--secundary);
}
.p-navegation{
    display: flex;
    flex-direction: column;
}

/*This method is for has a Responsive Web Design. Crtl + shift + p, search user snippets, then css. Here you can create shortcuts for the media queries. Now with mq, will creates the media querie.*/
@media (min-width: 768px) { /*Passing of this range, you will do the next.*/
    .p-navegation{
        flex-direction: row;
        justify-content: space-between; /*Now can moves the urls in horizontal direction. If you want to change de direction in vertical, you need to modify other value in the display flex.*/
    }
    /*
    min-width: 480px; for mobile
               768px; for tablets
               1140; for laptops and pc
    */
}
.p-navegation a {
    display: block;
    text-align: center;
    color: var(--white);
    text-decoration: none;
    font-size: 2rem;
    font-weight: 700;
    padding: 1rem;
}
.p-navegation a:hover { /*Styles that will appear when you put the mouse on the url, thanks to hover.*/
    background-color: var(--primary);
    color: var(--black);
}

/*Hero*/
.hero {
    background-image: url(../img/hero.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 350px;
    position: relative; /*This action is for can put hero-content in position absolute, for that, we need to put relative here, whom is the father.*/
    margin-bottom: 2rem;
}
.hero-content {
    position: absolute;
    background-color: rgb( 0 0 0 / 70%);
    width: 100%;
    height: 100%;

    /*To align vertically and horizontally*/
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center; 
}
.hero-content h2, .hero-content p {
    color: var(--white);
}
.hero-content .location {
    display: flex;
    align-items: flex-end;
}


/*Services*/
@media (min-width: 768px){
    .services {
        display: grid;
        grid-template-columns: repeat(3, 1fr); /*To repeat 3 times 1fr, because we have 3 elements, that mind, that divide all in same parts.*/ 
        column-gap: 1rem;
    }
}
/*
Utiliza Flexbox: para la alineacion o distribucion de los elementos que estaran dentro de contenedores (Barra de navegacion).
Utiliza CSS Grid: para definir el Layout de tu sitio web, como pueden ser las columnas o contenedores de elementos (Servicios como en este caso).
*/
.service {
    display: flex;
    flex-direction: column;
    align-items: center;
}
.service h3 {
    color: var(--secundary);
    font-weight: normal;
}
.service p {
    line-height: 2;
    text-align: center;
}
.service .icons {
    height: 15rem;
    width: 15rem;
    background-color: var(--primary);
    border-radius: 50%;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}


/*Form*/
.form {
    background-color: var(--gray);
    width: min( 60rem, 100%); /*It uses the less value*/
    margin: 0 auto;
    padding: 2rem;
    border-radius: 1rem;
}
.form fieldset {
    border: none;
}
.form legend {
    color: var(--primary);
    text-align: center;
    font-size: 1.8rem;
    text-transform: uppercase;
    font-weight: 700;
    margin-bottom: 2rem;
}

@media (min-width: 768px){
    .fields-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: auto auto 20rem;
        column-gap: 1rem;
    }
    .field:nth-child(3), .field:nth-child(4) {
        grid-column: 1 / 3;
    } 
}

.field {
    margin-bottom: 1rem;
}
.field label {
    color: var(--white);
    font-weight: 700;
    margin-bottom: .5rem;
    display: block;
}
.field textarea {
    width: 100%;
    height: 18rem;
}
.input-text {
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: .5rem;
}

footer {
    text-align: center;
}
